#! /usr/bin/env python
import numpy as np
import math
import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal, MoveBaseResult, MoveBaseFeedback
from geometry_msgs.msg import PoseWithCovarianceStamped, Pose
from sensor_msgs.msg import LaserScan
from . import utils


obstacles = []
robot_pos = np.array([])


def feedback_callback(feedback):
    print('[Feedback] Going to Goal Pose...')


def sub_callback(msg):
    print(msg.pose.pose)
    global robot_pos
    robot_pos = utils.get_trans_matrix_robot(
        msg.pose.pose.orientation.z,
        msg.pose.pose.orientation.x,
        msg.pose.pose.orientation.y,
        msg.pose.pose.orientation.z
    )


def laser_callback(msg):
    data = np.array(list(msg.ranges))
    gdata = np.gradient(data)
    nz_gdata = np.where(abs(gdata) > 0.2)[0]
    f_gdata = [nz_gdata[i] for i in range(len(nz_gdata[:-1])) if nz_gdata[i + 1] - nz_gdata[i] > 1][1:]
    p_objects = gdata[f_gdata]
    objects = [(f_gdata[i], f_gdata[i + 1]) for i in range(len(p_objects[:-1])) if
               p_objects[i] < 0 and p_objects[i + 1] > 0]
    obs = []
    for obj in objects:
        d = utils.get_obstacle_distance(
            obj[0],
            obj[1],
            data[obj[0]],
            data[int((obj[0] + obj[1]) / 2)]
        )
        x_, y_ = utils.get_obstacle_position(
            d,
            int((obj[0] + obj[1]) / 2),
            robot_pos[0][3],
            robot_pos[1][3],
        )
        print(d, int((obj[0] + obj[1]) / 2))
        obs.append((x_, y_))
    print(obs)


rospy.init_node('move_base_action_client')
client = actionlib.SimpleActionClient('/move_base', MoveBaseAction)
client.wait_for_server()

sub_pose = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, sub_callback)
laser_msg = rospy.Subscriber('/scan', LaserScan, laser_callback)
while True:
    x, y, Rz = input("Enter your value: ")
    print(x, y, Rz)

    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = 'map'
    goal.target_pose.pose.position.x = x
    goal.target_pose.pose.position.y = y
    goal.target_pose.pose.position.z = 0.0
    goal.target_pose.pose.orientation.x = 0.0
    goal.target_pose.pose.orientation.y = 0.0
    goal.target_pose.pose.orientation.z = Rz
    goal.target_pose.pose.orientation.w = 0.66
    client.send_goal(goal, feedback_cb=feedback_callback)
    client.wait_for_result()
    print('[Result] State: %d' % (client.get_state()))
